Description: 'AWS resources for project: ${self:service}-${opt:stage}-${self:provider.region}'

Mappings:

  # Find the latest available:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html

  AWSRegionToAMI:
    us-east-1:
      AMI: ami-eca289fb
    us-east-2:
      AMI: ami-446f3521
    us-west-1:
      AMI: ami-9fadf8ff
    us-west-2:
      AMI: ami-7abc111a
    eu-west-1:
      AMI: ami-a1491ad2
    eu-central-1:
      AMI: ami-54f5303b
    ap-northeast-1:
      AMI: ami-9cd57ffd
    ap-southeast-1:
      AMI: ami-a900a3ca
    ap-southeast-2:
      AMI: ami-5781be34

Resources:

  #------------------- SQS configuration -------------------#
  ServerlessQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: "${self:service}-${opt:stage}-ServerlessQueue"
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "ServerlessDeadLetterQueue"
            - "Arn"
        maxReceiveCount: 2

  ServerlessDeadLetterQueue:
    Type: "AWS::SQS::Queue"
  #------------------- SQS configuration END -------------------#

  #------------------- ECR configuration -------------------#
  EcrRepository:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: "${self:service}-${opt:stage}-serverless"
  #------------------- ECR configuration END -------------------#

  #------------------- VPC configuration END -------------------#
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: '${self:service}'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: '${self:service}'

  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: Vpc
    Properties:
      VpcId:
        Ref: Vpc
      InternetGatewayId:
        Ref: InternetGateway

  SubnetAPublic:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      CidrBlock: 10.0.0.0/20
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: Vpc
      Tags:
        - Key: Name
          Value: '${self:service}-a-public'
        - Key: Reach
          Value: public

  SubnetAPrivate:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      CidrBlock: 10.0.16.0/20
      VpcId:
        Ref: Vpc
      Tags:
        - Key: Name
          Value: '${self:service}-a-private'
        - Key: Reach
          Value: private

  SubnetBPublic:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: ''
      CidrBlock: 10.0.32.0/20
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: Vpc
      Tags:
        - Key: Name
          Value: '${self:service}-b-public'
        - Key: Reach
          Value: public

  SubnetBPrivate:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: ''
      CidrBlock: 10.0.48.0/20
      VpcId:
        Ref: Vpc
      Tags:
        - Key: Name
          Value: '${self:service}-b-private'
        - Key: Reach
          Value: private

  RouteTableAssociationAPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SubnetAPublic
      RouteTableId:
        Ref: RouteTablePublic

  RouteTableAssociationAPrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SubnetAPrivate
      RouteTableId:
        Ref: RouteTablePrivate

  RouteTableAssociationBPublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SubnetBPublic
      RouteTableId:
        Ref: RouteTablePublic

  RouteTableAssociationBPrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: SubnetBPrivate
      RouteTableId:
        Ref: RouteTablePrivate

  SubnetNetworkAclAssociationAPublic:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - SubnetAPublic
      - NetworkAclPublic
    Properties:
      SubnetId:
        Ref: SubnetAPublic
      NetworkAclId:
        Ref: NetworkAclPublic

  SubnetNetworkAclAssociationAPrivate:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - SubnetAPrivate
      - NetworkAclPrivate
    Properties:
      SubnetId:
        Ref: SubnetAPrivate
      NetworkAclId:
        Ref: NetworkAclPrivate

  SubnetNetworkAclAssociationBPublic:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - SubnetBPublic
      - NetworkAclPublic
    Properties:
      SubnetId:
        Ref: SubnetBPublic
      NetworkAclId:
        Ref: NetworkAclPublic

  SubnetNetworkAclAssociationBPrivate:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - SubnetBPrivate
      - NetworkAclPrivate
    Properties:
      SubnetId:
        Ref: SubnetBPrivate
      NetworkAclId:
        Ref: NetworkAclPrivate

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    DependsOn: Vpc
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
        - Key: Name
          Value: '${self:service}-public'

  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    DependsOn: Vpc
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
        - Key: Name
          Value: '${self:service}-private'

  RouteTablePublicInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VpcGatewayAttachment
    Properties:
      RouteTableId:
        Ref: RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  NetworkAclPublic:
    Type: AWS::EC2::NetworkAcl
    DependsOn: Vpc
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
        - Key: Name
          Value: '${self:service}-public'

  NetworkAclPrivate:
    Type: AWS::EC2::NetworkAcl
    DependsOn: Vpc
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
        - Key: Name
          Value: '${self:service}-private'

  NetworkAclEntryInPublicAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublic
      RuleNumber: '99'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0

  NetworkAclEntryOutPublicAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPublic
      RuleNumber: '99'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0

  NetworkAclEntryInPrivateAllowVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivate
      RuleNumber: '99'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0

  NetworkAclEntryOutPrivateAllowVPC:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAclPrivate
      RuleNumber: '99'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  #------------------- VPC configuration END -------------------#

  #------------------- Security Group -------------------#
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId:
        Ref: Vpc

  EcsSecurityGroupSSHinbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::GetAtt:
          - EcsSecurityGroup
          - GroupId
      IpProtocol: tcp
      FromPort: "22"
      ToPort: "22"
      CidrIp: 0.0.0.0/0
  #------------------- Security Group END -------------------#

  #------------------- Roles -------------------#
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            Resource:
              Fn::Join:
              - ":"
              - - arn:aws:logs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - log-group
                - Fn::Join:
                   - "-"
                   - - ECS-worker
                     - Ref: AWS::StackName
                - "*"

          - Effect: Allow
            Action:
            - logs:PutLogEvents
            Resource:
              Fn::Join:
              - ":"
              - - arn:aws:logs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - log-group
                - Fn::Join:
                   - "-"
                   - - ECS-worker
                     - Ref: AWS::StackName
                - "*:*"

          - Effect: Allow
            Action:
            - ecs:CreateCluster
            - ecs:DeregisterContainerInstance
            - ecs:RegisterContainerInstance
            - ecs:Submit*
            Resource:
            - Fn::Join:
              - ":"
              - - arn:aws:ecs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - cluster/${self:service}-${opt:stage}-serverless

          - Effect: Allow
            Action:
            - ecs:Poll
            - ecs:StartTelemetrySession
            Resource:
            - Fn::Join:
              - ":"
              - - arn:aws:ecs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - container-instance/*

          - Effect: Allow
            Action:
            - ecs:DiscoverPollEndpoint
            - ecr:GetAuthorizationToken
            Resource: '*'

          - Effect: Allow
            Action:
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            Resource:
              Fn::Join:
              - ":"
              - - arn:aws:ecr
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - repository/${self:service}-${opt:stage}-serverless

          - Effect: Allow
            Action:
            - sqs:SendMessage
            - sqs:GetQueueUrl
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            Resource:
            - Fn::GetAtt:
              - ServerlessQueue
              - Arn
            - Fn::GetAtt:
              - ServerlessDeadLetterQueue
              - Arn

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [Ref: 'EC2Role']
  #------------------- Roles END -------------------#

  #------------------- logs ----------------------#
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Join:
        - "-"
        - - "ECS-worker"
          - Ref: AWS::StackName
      RetentionInDays: 3
  #------------------- logs END ----------------------#

  #------------------- ECS cluster -------------------#
  ECSCluster:
    Type: AWS::ECS::Cluster
    DependsOn:
    - Vpc
    Properties:
      ClusterName: "${self:service}-${opt:stage}-serverless"
  #------------------- ECS cluster END -------------------#

  #------------------- ECS task def -------------------#
  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
    - Vpc
    Properties:
      Family: "${self:service}-${opt:stage}-serverless-worker"
      ContainerDefinitions:
      - Name: serverless-worker
        Cpu: '512'
        Essential: 'true'
        Image:
          Fn::Join:
          - ""
          - - Ref: AWS::AccountId
            - ".dkr.ecr."
            - Ref: AWS::Region
            - ".amazonaws.com/${self:service}-${opt:stage}-serverless:latest"
        Memory: '1024'
        Environment:
        - Name: SERVERLESS_QUEUE_NAME
          Value: ${self:service}-${opt:stage}-ServerlessQueue
        - Name: REGION
          Value:
            Ref: AWS::Region
        - Name: VERSION
          Value: ${file(../package.json):version}
        - Name: ENVIRONMENT
          Value: ${opt:stage}

        MountPoints:
          - SourceVolume: "my-vol"
            ContainerPath: "/tmp"
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: CloudwatchLogsGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: ecs-serverless-worker
      Volumes:
        -
          Host:
            SourcePath: "/tmp"
          Name: "my-vol"
  #------------------- ECS task def END -------------------#

  #------------------- ECS container instance -------------------#
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegionToAMI
        - Ref: AWS::Region
        - AMI
      SecurityGroups:
        - Fn::GetAtt:
          - EcsSecurityGroup
          - GroupId
      InstanceType: t2.small
      IamInstanceProfile:
        Ref: 'EC2InstanceProfile'
      KeyName: ${self:custom.config.sshKeyPair}
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - "echo ECS_CLUSTER="
            - Ref: ECSCluster
            - " >> /etc/ecs/ecs.config\n"
            - 'yum install -y aws-cfn-bootstrap'
            - "\n"
            - Fn::Join:
              - ' '
              - - "/opt/aws/bin/cfn-init -v"
                - "--stack"
                - Ref: AWS::StackName
                - "--resource ContainerInstances"
                - "--region"
                - Ref: AWS::Region
                - "\n"
            - Fn::Join:
              - ' '
              - - "/opt/aws/bin/cfn-signal -e $?"
                - "--stack"
                - Ref: AWS::StackName
                - "--resource ECSAutoScalingGroup"
                - "--region"
                - Ref: AWS::Region
  #------------------- ECS container instance END -------------------#

  #------------------- ASG -------------------#
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
      - Fn::Select:
        - 0
        - Fn::GetAZs: ""
      - Fn::Select:
        - 1
        - Fn::GetAZs: ""
      VPCZoneIdentifier: [Ref: "SubnetAPublic", Ref: "SubnetBPublic"]
      LaunchConfigurationName:
        Ref: 'ContainerInstances'
      MinSize: ${self:custom.config.asg.minSize}
      MaxSize: ${self:custom.config.asg.maxSize}
      Tags:
      - Key: Name
        Value: ${self:service}-${opt:stage}
        PropagateAtLaunch: 'true'
      - Key: Environment
        Value: ${opt:stage}
        PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '2'
        PauseTime: PT1M

  ECSscaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: "ECSAutoScalingGroup"
      Cooldown: '60'
      ScalingAdjustment: '1'

  ECSscaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: "ECSAutoScalingGroup"
      Cooldown: '60'
      ScalingAdjustment: '-1'
  #------------------- ASG END -------------------#

Outputs:
  ServerlessQueueURL:
    Description: "URL of SQS Queue"
    Value:
      Ref: "ServerlessQueue"
  ServerlessQueueARN:
    Description: "ARN of SQS Queue"
    Value:
      Fn::GetAtt:
        - "ServerlessQueue"
        - "Arn"
  ServerlessQueueName:
    Description: "Name of SQS Queue"
    Value:
      Fn::GetAtt:
        - "ServerlessQueue"
        - "QueueName"

  ServerlessDeadLetterQueueURL:
    Description: "URL of SQS Deadletter Queue"
    Value:
      Ref: "ServerlessDeadLetterQueue"
  ServerlessDeadLetterQueueARN:
    Description: "ARN of SQS Deadletter Queue"
    Value:
      Fn::GetAtt:
        - "ServerlessDeadLetterQueue"
        - "Arn"
  ServerlessDeadLetterQueueName:
    Description: "Name of SQS Deadletter Queue"
    Value:
      Fn::GetAtt:
        - "ServerlessDeadLetterQueue"
        - "QueueName"

  ECSCluster:
    Description: A reference to the ECS cluster
    Value:
      Ref: ECSCluster

  taskdefinition:
    Value:
      Ref: "taskdefinition"

  VpcId:
    Description: VCP indentifier
    Value:
      Ref: Vpc
    Export:
      Name: ${self:service}-${opt:stage}-VpcId

  VpcSubnetAPublic:
    Description: Subnet A public
    Value:
      Ref: SubnetAPublic
    Export:
      Name: ${self:service}-${opt:stage}-VpcSubnetAPublic

  VpcSubnetAPrivate:
    Description: Subnet A private
    Value:
      Ref: SubnetAPrivate
    Export:
      Name: ${self:service}-${opt:stage}-VpcSubnetAPrivate

  VpcSubnetBPublic:
    Description: Subnet B public
    Value:
      Ref: SubnetBPublic
    Export:
      Name: ${self:service}-${opt:stage}-VpcSubnetBPublic

  VpcSubnetBPrivate:
    Description: Subnet B private
    Value:
      Ref: SubnetBPrivate
    Export:
      Name: ${self:service}-${opt:stage}-VpcSubnetBPrivate
